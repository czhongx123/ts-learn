//学习记录
网址：https://ts.xcatliu.com/
void与any对应--它代表没有任何数据类型，我们常用的方法没有任何返回值：
function warnUser():void{
    alert('this is my warning message');
}
-------------------------对象的类型，接口--interface----------------

interface Person{
    name:'string',
    age:number
}

--可选属性 ？
--任意属性 [propName:string]:any
--只读属性 readonly

-----------------------------数组的类型-----------------------------
「类型 + 方括号」表示法
let fibonacci: number[] = [1, 1, 2, 3, 5];

数组的泛型
let fibonacci:Array<number>= [1, 1, 2, 3, 5];

用接口表示数组
interface NumberArray{
    [index:number]:number;
}
let fibonacci:NumberArray = [1, 1, 2, 3, 5];

any 在数组中的应用
let list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];


-------------------------函数的类型------------------------------

function sum(x:number,y:number):number{
    return x+y
}

let mySum:(x:number,y:number)=>number=function(x:number,y:number):number{
    return x+y
}

用接口定义函数的形状
interface SearchFuc{
    (source:string,substring:string):boolean
}

let mySearch:SearchFuc
mySearch=function(source:string,substring:string){
    return source.indexOf(substring)!=-1
}
    

可选参数---可选参数后面不允许再出现必须参数了
参数默认值---TypeScript 会将添加了默认值的参数识别为可选参数,此时就不受「可选参数必须接在必需参数后面」的限制了

剩余参数----可以使用 ...rest 的方式获取函数中的剩余参数，rest 参数只能是最后一个参数


重载----重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。
function reverse(x: number): number;
function reverse(x: string): string;
function reverse(x: number | string): number | string {
    if (typeof x === 'number') {
        return Number(x.toString().split('').reverse().join(''));
    } else if (typeof x === 'string') {
        return x.split('').reverse().join('');
    }
}

-----------------------------------类型断言------------------------------------------

语法：<类型>值   或  值 as 类型
function getLength(something: string | number): number {
    if ((<string>something).length) {
        return (<string>something).length;
    } else {
        return something.toString().length;
    }
}

-----------------------------------声明文件------------------------------------------
使用 declare var 来定义它的类型：
declare var jQuery: (selector: string) => any;
jQuery('#foo');

通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件:
declare var jQuery: (selector: string) => any;

注意：声明文件必须以 .d.ts 为后缀
更推荐的是使用 @types 统一管理第三方库的声明文件

npm install @types/jquery --save-dev


==================书写声明文件===============
全局变量的声明文件主要有以下几种语法：

declare var 声明全局变量
declare function 声明全局方法
declare class 声明全局类
declare enum 声明全局枚举类型
declare namespace 声明全局对象（含有子属性）
interface 和 type 声明全局类型

-----------------------------------------------类型别名-----------------------------------
类型别名用来给一个类型起个新名字----type 创建类型别名。--类型别名常用于联合类型。

type Name = string;
type NameResolver = () => string;
type NameOrResolver = Name | NameResolver;
function getName(n: NameOrResolver): Name {
    if (typeof n === 'string') {
        return n;
    } else {
        return n();
    }
}
--------------------------------------------枚举------------------------------------------

enum Days {Sun = 3, Mon = 1, Tue, Wed, Thu, Fri, Sat};

-------------------------------------------TypeScript 中类的用法---------------------------

public ：修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的
private 修饰的属性或方法是私有的，不能在声明它的类的外部访问
protected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的

abstract 用于定义抽象类和其中的抽象方法。--抽象类是不允许被实例化的---抽象类中的抽象方法必须被子类实现

------------------------------------------类与接口------------------------------------------

--类实现接口--
实现(implements)是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，
这时候就可以把特性提取成接口（interfaces），用 implements 关键字来实现。这个特性大大提高了面向对象的灵活性。
interface Alarm {
    alert();
}

interface Light {
    lightOn();
    lightOff();
}

class Car implements Alarm, Light {
    alert() {
        console.log('Car alert');
    }
    lightOn() {
        console.log('Car light on');
    }
    lightOff() {
        console.log('Car light off');
    }
}
-----接口继承接口----
interface Alarm {
    alert();
}

interface LightableAlarm extends Alarm {
    lightOn();
    lightOff();
}

-----接口继承类--------
class Point {
    x: number;
    y: number;
}

interface Point3d extends Point {
    z: number;
}

let point3d: Point3d = {x: 1, y: 2, z: 3};
--一个函数还可以有自己的属性和方法---
interface Counter {
    (start: number): string;
    interval: number;
    reset(): void;
}

function getCounter(): Counter {
    let counter = <Counter>function (start: number) { };
    counter.interval = 123;
    counter.reset = function () { };
    return counter;
}

let c = getCounter();
c(10);
c.reset();
c.interval = 5.0;


------------------------------------------泛型-------------------------------------------------
泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。

function createArray<T>(length: number, value: T): Array<T> {
    let result: T[] = [];
    for (let i = 0; i < length; i++) {
        result[i] = value;
    }
    return result;
}

createArray<string>(3, 'x'); // ['x', 'x', 'x']

T 用来指代任意输入的类型
------------------------------------------声明合并---------------------------------------------
interface Alarm {
    price: number;
    alert(s: string): string;
}
interface Alarm {
    weight: number;
    alert(s: string, n: number): string;
}
相当于
interface Alarm {
    price: number;
    weight: number;
    alert(s: string): string;
    alert(s: string, n: number): string;
}
----------------------------------------三种命名规范---------------------------------------------
1.匈牙利命名法；
开头字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，要求单词第一个字母大写。
int iMyAge; “i”是int类型的缩写； 

2.驼峰式命名法；2.帕斯卡命名法（大驼峰命名法）

